<?php

/**
 * This file is part of the Yii2 extension module, yii2-visitor
 *
 * @author John Snook
 * @date Aug 4, 2018
 * @license https://snooky.biz/site/license
 * @copyright 2018 John Snook Consulting
 */

namespace johnsnook\visitors\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use yii\db\Expression;
use johnsnook\visitors\models\Visitor;
use johnsnook\parsel\ParselQuery;

/**
 * VisitorSearch represents the model behind the search form of
 * [[johnsnook\visitors\models\Visitor]].
 *
 * This is the model class for table "visitor".
 *
 * @property string $ip
 * @property boolean $banned
 * @property string $created_at
 * @property string $updated_at
 * @property integer $user_id
 * @property string $city
 * @property string $region
 * @property string $country
 * @property string $postal
 * @property double $latitude
 * @property double $longitude
 * @property string $asn
 * @property string $organization
 * @property string $proxy
 * @property string $hat_color
 * @property string $hat_rule
 *
 * @property-read ParselQuery $parselQuery Use this to capture the user query in other data searches like chartdata
 * @property ActiveDataProvider $dataProvider
 * @property array $mapChartData
 * @property string $sql
 */
class VisitorSearch extends Visitor {

    /**
     * @var string Virtual field to pass user query for yii2-parsel
     */
    public $userQuery;

    /**
     * @var string Any parser errors that may have occurred
     */
    public $queryError;

    /**
     *
     * @var boolean Whether to join visits table and search it
     */
    public $searchChildren = false;

    /**
     * @var ParselQuery The sql string generated by ParselQuery. For debugging purposes
     */
    protected $parselQuery;

    /**
     * @var array The fields to search with ParselQuery
     */
    private $fields = [
        'ip' => 'visitor.ip',
        'city', 'region', 'country',
        'asn', 'organization',
        'proxy', 'name',
        'request' => 'visits.request',
        'referer' => 'visits.referer'
    ];

    /**
     * Instead of passing the query parameters to the search, we'll pass it in the
     * options array, so we can use it for more than just getting a [[ActiveDataProvider]].
     *
     * Also, the search method is now called "getDataProvider".
     *
     * @var array The parameters from the user request
     */
    public $queryParams;

    /**
     * {@inheritdoc}
     *
     * Instead of passing the query parameters to the search, we'll pass it in the
     * options array
     */
    public function init() {
        parent::init();

        $this->load($this->queryParams);

        $query = Visitor::find()
                ->select(['visitor.ip'])
                ->distinct()
                ->addSelect(['name', 'city', 'region', 'country', 'visits', 'asn', 'organization', 'updated_at']);

        if ($this->searchChildren) {
            $query->leftJoin('visits', 'visitor.ip = visits.ip');
            $this->fields['request'] = 'visits.request';
            $this->fields['referer'] = 'visits.referer';
        }

        $this->parselQuery = new ParselQuery([
            'userQuery' => $this->userQuery,
            'searchFields' => $this->fields,
            'dbQuery' => $query
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function rules() {
        return [
            //[['id'], 'integer'],
            [['ip', 'userQuery'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios() {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @return ActiveDataProvider
     */
    public function getDataProvider() {

        return new ActiveDataProvider([
            'query' => $this->parselQuery->dbQuery,
            'pagination' => [
                'pageSize' => 20,
            ],
            'sort' => [
                'defaultOrder' => [
                    'updated_at' => SORT_DESC,
                ]
            ],
        ]);
    }

    /**
     *
     * @return array latitude, longitude & organization
     */
    public function getMapChartData() {
        $query = $this->parselQuery->dbQuery;
        $query->select('latitude')
                ->distinct()
                ->addSelect(['longitude', 'organization', 'visits'])
                ->andWhere(['not', ['longitude' => null]]);
//        echo $this->parselQuery->sql;
//        echo $query->createCommand()->getRawSql();
//        die();

        $locations = $query->asArray()->all();

        /** Add column labels */
        $googleData = [['Latitude', 'Longitude', 'Organization']];

        foreach ($locations as $location) {
            $location = (object) $location;
            $googleData[] = [
                floatval($location->latitude),
                floatval($location->longitude),
                $location->organization . "<br>\n" . $location->visits . ' visits'
            ];
        }
        return $googleData;

        //->joinWith('visitor');
        //$out = $this->renderAjax('visitor-index-map', ['locations' => $query]);
        //return Json::encode($query->asArray()->all());
        //return Json::encode($out);
    }

    /**
     *
     * @return array
     */
    public function getNewVistorsByDay() {
        $query = $this->parselQuery->dbQuery;
        $query->distinct = null;
        $query->select([
                    'x' => new Expression("distinct created_at::date"),
                    'visitors' => new Expression('count(ip)')
                ])
                ->groupBy('x')
                ->orderBy('x');

        return $query->asArray()->all();
    }

    /**
     * select (to_char(created_at, 'YYYY-MM-DD HH24') || ':00')::timestamp as time,
     *      count(distinct ip) as visitors
     * group by created_at
     * order created_at;
     *
     * @return array
     */
    public function getNewVistorsByHour($day) {

        $query = $this->parselQuery->dbQuery
                ->select([
            'x' => new Expression(" (to_char(created_at, 'YYYY-MM-DD HH24') || ':00')::timestamp"),
            'visitors' => new Expression('count(ip)')
        ]);
        $query->join = null;
//        dump($query);
//        die();

        if (!empty($day)) {
            $query->andWhere("created_at::date = '$day'::date");
        }
        $query->groupBy('x')->orderBy('x');

        return $query->asArray()->all();
    }

    /**
     * The ParselQuery object
     *
     * @return ParselQuery
     */
    public function getParselQuery() {
        return $this->parselQuery;
    }

    /**
     * The search fields list
     *
     * @return array
     */
    public function getFields() {
        return $this->fields;
    }

}
